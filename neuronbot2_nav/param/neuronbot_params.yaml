amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.9
    alpha2: 0.1
    alpha3: 0.05
    alpha4: 0.01
    alpha5: 0.04
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.02
    pf_z: 0.85
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 2
    robot_model_type: "differential"
    save_pose_rate: 0.5
    sigma_hit: 0.02
    tf_broadcast: true
    transform_tolerance: 0.5
    update_min_a: 0.06
    update_min_d: 0.025
    z_hit: 0.7
    z_max: 0.001
    z_rand: 0.059
    z_short: 0.24
    
    # Initial Pose
    set_initial_pose: True
    initial_pose.x: 0.0
    initial_pose.y: 0.0
    initial_pose.z: 0.0
    initial_pose.yaw: 0.0        

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_footprint
    default_bt_xml_filename: "navigate_w_replanning_time.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    controller_plugin_types: ["dwb_core::DWBLocalPlanner"]
    controller_plugin_ids: ["FollowPath"]
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001

    # DWB parameters
    FollowPath.debug_trajectory_details: True
    FollowPath.min_vel_x: -1.0
    FollowPath.min_vel_y: 0.0
    FollowPath.max_vel_x: 1.0
    FollowPath.max_vel_y: 0.0
    FollowPath.max_vel_theta: 1.5
    FollowPath.min_speed_xy: 0.0
    FollowPath.max_speed_xy: 0.5
    FollowPath.min_speed_theta: 0.0
    # Add high threshold velocity for turtlebot 3 issue.
    # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
    FollowPath.acc_lim_x: 0.5
    FollowPath.acc_lim_y: 0.0
    FollowPath.acc_lim_theta: 1.5
    FollowPath.decel_lim_x: -0.5
    FollowPath.decel_lim_y: 0.0
    FollowPath.decel_lim_theta: -1.5
    FollowPath.vx_samples: 40
    FollowPath.vy_samples: 0
    FollowPath.vtheta_samples: 40
    FollowPath.sim_time: 2.0
    FollowPath.linear_granularity: 0.05
    FollowPath.angular_granularity: 0.025
    FollowPath.transform_tolerance: 0.2
    FollowPath.xy_goal_tolerance: 0.25
    FollowPath.trans_stopped_velocity: 0.25
    FollowPath.short_circuit_trajectory_evaluation: True
    FollowPath.stateful: True
    FollowPath.critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    FollowPath.BaseObstacle.scale: 0.02
    FollowPath.PathAlign.scale: 50.0
    FollowPath.GoalAlign.scale: 20.0
    FollowPath.PathAlign.forward_point_distance: 0.1
    FollowPath.GoalAlign.forward_point_distance: 0.1
    FollowPath.PathDist.scale: 50.0
    FollowPath.GoalDist.scale: 20.0
    FollowPath.RotateToGoal.scale: 32.0
    FollowPath.RotateToGoal.slowing_factor: 5.0
    FollowPath.RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      #plugin_names: ["obstacle_layer", "stvl_layer", "inflation_layer"]
      #plugin_types: ["nav2_costmap_2d::ObstacleLayer", "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer", "nav2_costmap_2d::InflationLayer"]      
      plugin_names: ["obstacle_layer", "inflation_layer"]
      plugin_types: ["nav2_costmap_2d::ObstacleLayer", "nav2_costmap_2d::InflationLayer"]
      robot_radius: 0.20
      inflation_layer:
        cost_scaling_factor: 3.0
      obstacle_layer:
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          obstacle_range: 2.5
          raytrace_range: 10.0
      stvl_layer:
        enabled: true
        voxel_decay: 15.0                # seconds if linear, e^n if exponential
        decay_model: 0                  # 0=linear, 1=exponential, -1=persistent
        voxel_size: 0.05                # meters
        track_unknown_space: true       # default space is known
        max_obstacle_height: 0.5        # meters
        unknown_threshold: 15           # voxel height
        mark_threshold: 0               # voxel height
        update_footprint_enabled: true
        combination_method: 1           # 1=max, 0=override
        obstacle_range: 3.0             # meters
        origin_z: 0.0                   # meters
        publish_voxel_map: true        # default off; set true to visualize in RViz but increasing system/traffic load
        transform_tolerance: 0.2        # seconds
        mapping_mode: false             # default off, saves map not for navigation
        map_save_duration: 60.0         # default 60s, how often to autosave
        observation_sources: pointcloud
        pointcloud:
          data_type: PointCloud2
          topic: /camera/pointcloud
          marking: true
          clearing: true
          min_obstacle_height: 0.0      # default 0, meters
          max_obstacle_height: 0.5      # default 3, meters
          expected_update_rate: 0.0     # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0  # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false           # default false, for laser scans
          voxel_filter: true            # default off, apply voxel filter to sensor, recommend on
          clear_after_reading: true     # default false, clear the buffer after the layer gets readings from it
          max_z: 7.0                    # default 0, meters
          min_z: 0.0                    # default 10, meters
          vertical_fov_angle: 0.9948    # 57 degree to radian
          horizontal_fov_angle: 1.501   # 86 degree to radian
          decay_acceleration: 15.0      # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 0                 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 2.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: False
      #plugin_names: ["static_layer", "obstacle_layer", "stvl_layer", "inflation_layer"]
      #plugin_types: ["nav2_costmap_2d::StaticLayer", "nav2_costmap_2d::ObstacleLayer", "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer", "nav2_costmap_2d::InflationLayer"]
      plugin_names: ["static_layer", "obstacle_layer", "inflation_layer"]
      plugin_types: ["nav2_costmap_2d::StaticLayer", "nav2_costmap_2d::ObstacleLayer", "nav2_costmap_2d::InflationLayer"]      
      robot_radius: 0.20
      resolution: 0.05
      obstacle_layer:
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          obstacle_range: 2.5
          raytrace_range: 10.0
      stvl_layer:
        enabled: true
        voxel_decay: 15.0                # seconds if linear, e^n if exponential
        decay_model: 0                  # 0=linear, 1=exponential, -1=persistent
        voxel_size: 0.05                # meters
        track_unknown_space: true       # default space is known
        max_obstacle_height: 0.5        # meters
        unknown_threshold: 15           # voxel height
        mark_threshold: 0               # voxel height
        update_footprint_enabled: true
        combination_method: 1           # 1=max, 0=override
        obstacle_range: 3.0             # meters
        origin_z: 0.0                   # meters
        publish_voxel_map: true         # default off; set true to visualize in RViz but increasing system/traffic load
        transform_tolerance: 0.2        # seconds
        mapping_mode: false             # default off, saves map not for navigation
        map_save_duration: 60.0         # default 60s, how often to autosave
        observation_sources: pointcloud
        pointcloud:
          data_type: PointCloud2
          topic: /camera/pointcloud
          marking: true
          clearing: true
          min_obstacle_height: 0.0      # default 0, meters
          max_obstacle_height: 0.5      # default 3, meters
          expected_update_rate: 0.0     # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0  # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false           # default false, for laser scans
          voxel_filter: true            # default off, apply voxel filter to sensor, recommend on
          clear_after_reading: true     # default false, clear the buffer after the layer gets readings from it
          max_z: 7.0                    # default 0, meters
          min_z: 0.0                    # default 10, meters
          vertical_fov_angle: 0.9948    # 57 degree to radian
          horizontal_fov_angle: 1.501   # 86 degree to radian
          decay_acceleration: 15.0      # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 0                 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "turtlebot3_world.yaml"
    
map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    
planner_server:
  ros__parameters:
    planner_plugin_types: ["nav2_navfn_planner/NavfnPlanner"]
    planner_plugin_ids: ["GridBased"]
    use_sim_time: False
    GridBased.tolerance: 0.5
    GridBased.use_astar: false
    GridBased.allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    plugin_names: ["spin", "backup", "wait"]
    plugin_types: ["nav2_recoveries/Spin", "nav2_recoveries/BackUp", "nav2_recoveries/Wait"]
    global_frame: odom
    robot_base_frame: base_footprint
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.3
    min_rotational_vel: 0.0
    rotational_acc_lim: 0.3

robot_state_publisher:
  ros__parameters:
    use_sim_time: False
